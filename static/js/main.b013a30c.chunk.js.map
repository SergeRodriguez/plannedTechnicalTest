{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["getRowId","row","id","initialRows","name","group","map","index","App","useState","title","columns","localStorage","getItem","JSON","parse","rows","setRows","columnName","direction","sorting","setSorting","grouping","setGrouping","columnOrder","setColumnOrder","searchValue","setSearchState","createRowChange","value","email","editingColumnExtensions","useEffect","setItem","stringify","className","onSortingChange","onGroupingChange","columnExtensions","onCommitChanges","changedRows","added","changed","deleted","startingAddedId","length","deletedSet","Set","filter","has","onValueChange","order","onOrderChange","showGroupingControls","showSortingControls","showAddCommand","showEditCommand","showDeleteCommand","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b013a30c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Grid,\n  Table,\n  TableHeaderRow,\n  TableGroupRow,\n  GroupingPanel,\n  TableEditRow,\n  TableEditColumn,\n  Toolbar,\n  DragDropProvider,\n  TableColumnReordering,\n  SearchPanel,\n} from '@devexpress/dx-react-grid-bootstrap4';\n\nimport {\n  SortingState,\n  IntegratedSorting,\n  GroupingState,\n  IntegratedGrouping,\n  EditingState,\n  SearchState,\n  IntegratedFiltering\n} from '@devexpress/dx-react-grid';\n\nimport '@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css';\n\nconst getRowId = row => row.id;\n\nconst initialArray = [\n  { name: \"Sandra Sonder\", group: \"Marketing\", },\n  { name: \"Paul Poli\", group: \"Marketing\", },\n  { name: \"Mark Marker\", group: \"Human Resources\", },\n  { name: \"Paul Paulizky\", group: \"Engineering\", },\n  { name: \"Linda Linder\", group: \"Management\", }\n]\n\nconst initialRows = initialArray.map((row, index) => ({ ...row, id: index }))\n\nfunction App() {\n\n  const [columns] = useState(\n    [\n      { name: \"name\", title: \"Employee\" },\n      { name: \"email\", title: \"Email\" },\n      { name: \"group\", title: \"Group\" },\n    ]\n  );\n  const [rows, setRows] = useState(localStorage.getItem(\"rows\")\n    ? JSON.parse(localStorage.getItem(\"rows\")) : initialRows);\n  const [sorting, setSorting] = useState([{ columnName: 'group', direction: 'asc' }]);\n  const [grouping, setGrouping] = useState([]);\n  const [columnOrder, setColumnOrder] = useState(['name', 'email', 'group']);\n  const [searchValue, setSearchState] = useState('');\n\n  const [editingColumnExtensions] = useState([\n    {\n      columnName: 'name',\n      createRowChange: (row, value) => ({ ...row, name: value }),\n    },\n    {\n      columnName: 'email',\n      createRowChange: (row, value) => ({ ...row, email: value }),\n    },\n    {\n      columnName: 'group',\n      createRowChange: (row, value) => ({ ...row, group: value }),\n    },\n  ]);\n  // const [filters, setFilters] = useState([{ columnName: '', value: '' }]);\n\n\n\n  const commitChanges = ({ added, changed, deleted }) => {\n    let changedRows;\n    if (added) {\n      const startingAddedId = rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\n      changedRows = [\n        ...rows,\n        ...added.map((row, index) => ({\n          id: startingAddedId + index,\n          ...row,\n        })),\n      ];\n    }\n    if (changed) {\n      changedRows = rows.map(row => (changed[row.id] ? { ...row, ...changed[row.id] } : row));\n    }\n    if (deleted) {\n      const deletedSet = new Set(deleted);\n      changedRows = rows.filter(row => !deletedSet.has(row.id));\n    }\n    setRows(changedRows);\n  };\n\n  // const [filteringColumnExtensions] = useState([\n  //   {\n  //     columnName: 'saleDate',\n  //     predicate: (value, filter, row) => {\n  //       if (!filter.value.length) return true;\n  //       if (filter && filter.operation === 'month') {\n  //         const month = parseInt(value.split('-')[1], 10);\n  //         return month === parseInt(filter.value, 10);\n  //       }\n  //       return IntegratedFiltering.defaultPredicate(value, filter, row);\n  //     },\n  //   },\n  // ]);\n  useEffect(() => {\n    localStorage.setItem(\"rows\", JSON.stringify(rows))\n    localStorage.setItem(\"sorting\", JSON.stringify(sorting))\n    localStorage.setItem(\"grouping\", JSON.stringify(grouping))\n    localStorage.setItem(\"columnOrder\", JSON.stringify(columnOrder))\n  }, [rows, sorting, grouping, columnOrder]);\n\n  return (\n    <div className=\"card\">\n      <Grid\n        rows={rows}\n        columns={columns}\n        getRowId={getRowId}\n      >\n        <DragDropProvider />\n\n        <SortingState\n          sorting={sorting}\n          onSortingChange={setSorting}\n        />\n        <IntegratedSorting />\n\n        <GroupingState\n          grouping={grouping}\n          onGroupingChange={setGrouping}\n        />\n        <IntegratedGrouping />\n\n        <EditingState\n          columnExtensions={editingColumnExtensions}\n          onCommitChanges={commitChanges}\n        />\n\n        <SearchState\n          value={searchValue}\n          onValueChange={setSearchState}\n        />\n        <IntegratedFiltering />\n        <Table\n        // tableComponent={TableComponent}\n        />\n        <TableColumnReordering\n          order={columnOrder}\n          onOrderChange={setColumnOrder}\n        />\n        <TableHeaderRow showGroupingControls showSortingControls />\n        <TableGroupRow />\n        <TableEditRow />\n        <Toolbar />\n        <GroupingPanel showGroupingControls showSortingControls />\n        <TableEditColumn showAddCommand showEditCommand showDeleteCommand />\n        <SearchPanel />\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}